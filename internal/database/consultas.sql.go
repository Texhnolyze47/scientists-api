// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: consultas.sql

package database

import (
	"context"
)

const infoProjectsScientists = `-- name: InfoProjectsScientists :many
SELECT
    s.dni,
    s.nomApels,
    p.id,
    p.nombre
FROM cientificos s
         INNER JOIN asignado_a a ON s.dni = a.cientifico
         INNER JOIN proyectos p ON a.proyecto = p.id
`

type InfoProjectsScientistsRow struct {
	Dni      string
	Nomapels string
	ID       string
	Nombre   string
}

func (q *Queries) InfoProjectsScientists(ctx context.Context) ([]InfoProjectsScientistsRow, error) {
	rows, err := q.db.QueryContext(ctx, infoProjectsScientists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InfoProjectsScientistsRow
	for rows.Next() {
		var i InfoProjectsScientistsRow
		if err := rows.Scan(
			&i.Dni,
			&i.Nomapels,
			&i.ID,
			&i.Nombre,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moreEightyHoursProject = `-- name: MoreEightyHoursProject :many

SELECT
    s.dni,
    s.nomApels
FROM cientificos s
         INNER JOIN asignado_a a ON s.dni = a.cientifico
GROUP BY s.dni, s.nomApels
HAVING COUNT(DISTINCT a.proyecto) > 1 AND AVG(a.dedicacion) > 80
`

func (q *Queries) MoreEightyHoursProject(ctx context.Context) ([]Cientifico, error) {
	rows, err := q.db.QueryContext(ctx, moreEightyHoursProject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cientifico
	for rows.Next() {
		var i Cientifico
		if err := rows.Scan(&i.Dni, &i.Nomapels); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numberHourScientificProject = `-- name: NumberHourScientificProject :many
SELECT
    s.dni,
    s.nomApels,
    SUM(a.dedicacion) AS total_dedicacion
FROM cientificos s
         INNER JOIN asignado_a a ON s.dni = a.cientifico
GROUP BY s.dni, s.nomApels
`

type NumberHourScientificProjectRow struct {
	Dni             string
	Nomapels        string
	TotalDedicacion int64
}

func (q *Queries) NumberHourScientificProject(ctx context.Context) ([]NumberHourScientificProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, numberHourScientificProject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NumberHourScientificProjectRow
	for rows.Next() {
		var i NumberHourScientificProjectRow
		if err := rows.Scan(&i.Dni, &i.Nomapels, &i.TotalDedicacion); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numberProjectsScientist = `-- name: NumberProjectsScientist :many


SELECT
    s.dni,
    s.nomApels,
    COUNT(DISTINCT a.proyecto) AS num_proyectos
FROM cientificos s
         INNER JOIN asignado_a a ON s.dni = a.cientifico
GROUP BY s.dni, s.nomApels
`

type NumberProjectsScientistRow struct {
	Dni          string
	Nomapels     string
	NumProyectos int64
}

func (q *Queries) NumberProjectsScientist(ctx context.Context) ([]NumberProjectsScientistRow, error) {
	rows, err := q.db.QueryContext(ctx, numberProjectsScientist)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NumberProjectsScientistRow
	for rows.Next() {
		var i NumberProjectsScientistRow
		if err := rows.Scan(&i.Dni, &i.Nomapels, &i.NumProyectos); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numberScientistsProject = `-- name: NumberScientistsProject :many


SELECT
    p.id,
    p.nombre,
    COUNT(DISTINCT a.cientifico) AS num_cientificos
FROM proyectos p
         INNER JOIN asignado_a a ON p.id = a.proyecto
GROUP BY p.id, p.nombre
`

type NumberScientistsProjectRow struct {
	ID             string
	Nombre         string
	NumCientificos int64
}

func (q *Queries) NumberScientistsProject(ctx context.Context) ([]NumberScientistsProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, numberScientistsProject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NumberScientistsProjectRow
	for rows.Next() {
		var i NumberScientistsProjectRow
		if err := rows.Scan(&i.ID, &i.Nombre, &i.NumCientificos); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
